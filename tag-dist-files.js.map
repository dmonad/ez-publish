{"version":3,"file":"tag-dist-files.js","sources":["src/tag-dist-files.js"],"sourcesContent":["import \"regenerator-runtime/runtime\";\nimport program from 'commander'\nimport packageJson from '../package.json'\nimport { posix as path } from 'path'\nimport fs from 'fs'\nimport loadJsonFile from 'load-json-file'\nimport { exec } from 'child_process'\nimport async from 'ez-async'\n\nprocess.on('uncaughtException', function (err) {\n  console.error('An exception was thrown: ', err)\n})\n\nprogram\n  .version(packageJson.version)\n  .description(packageJson.description)\n\nprogram.on('--help', function () {\n  console.log(`\n  Example:\n\n    $ tag-dist-files\n\n  `)\n})\n\nprogram\n  .arguments('[dir]')\n  .description('Publish the project including distribution files:\\n  Build > version bump > commit > create git tag > publish to npm')\n  .option('-f, --overwrite-existing-tag', 'Overwrite the existing tag')\n  .action(function (dir, command) {\n    // Specify options for calling process\n    var opts = { cwd: dir }\n\n    async(function * (getCallback) {\n      function * exit (err) {\n        console.error(err)\n        console.log('Reverting to master branch')\n        yield exec('git checkout master', opts, getCallback())\n        process.exit(1)\n      }\n\n      var getPackageJson = async(function * (getCallback, dir) {\n        while (true) {\n          var [err] = yield fs.access(dir, fs.F_OK, getCallback())\n          if (!err) {\n            var pDir = path.join(dir, 'package.json')\n            ;[err] = yield fs.access(pDir, fs.F_OK, getCallback())\n            if (!err) {\n              var p\n              ;[err, p] = yield loadJsonFile(pDir)\n              if (err) yield * exit(err)\n              return [dir, p]\n            } else {\n              dir = path.join(dir, '..')\n            }\n          } else yield * exit('You must specify a package.json file!')\n        }\n      })\n\n      var p, err, stdout, stderr\n\n      // check for existing package.json\n      ;[err, [dir, p]] = yield getPackageJson(dir || './')\n      if (err != null) {\n        console.error('package.json does not exist in this directory!')\n        process.exit(1)\n      }\n\n      // Is there a release message?\n      if (!fs.existsSync(path.join(dir, '.releaseMessage'))) {\n        yield exec('echo \"Title\\n\\nDescription\" > .releaseMessage', opts, getCallback())\n      }\n      // open it before publishing?\n      ;[err] = yield exec('xdg-open .releaseMessage', opts, getCallback())\n\n      // read releaseMessage\n      var releaseMessage\n      ;[err, releaseMessage] = yield fs.readFile(path.join(dir, '.releaseMessage'), 'utf8', getCallback())\n      releaseMessage = releaseMessage.split('\\n').filter(line => line[0] !== '#').join('\\n')\n\n      // detach head\n      ;[err, stdout, stderr] = yield exec('git checkout --detach', opts, getCallback())\n      if (err) {\n        yield * exit(`Unable to detach head:\\n\\n${stdout}\\n\\n${stderr}`)\n      } else {\n        console.log('✓ Detach head')\n      }\n      var releasefilesAdded = false\n      var files = p.files || []\n\n      // add dist files\n      for (var i = 0; i < files.length; i++) {\n        ;[err, stdout, stderr] = yield exec(`git add ${files[i]} -f`, opts, getCallback())\n        if (err) {\n          console.warn(`❌ Failed to add ${files[i]} to index`)\n        } else {\n          releasefilesAdded = true\n          console.log(`✓ Add ${files[i]} to index`)\n        }\n      }\n\n      if (releasefilesAdded) {\n        // commit dist files\n        ;[err, stdout, stderr] = yield exec(`git commit -am \"v${p.version} -- distribution files\"`, opts, getCallback())\n        if (err) {\n          yield * exit(`Unable to commit dist files:\\n\\n${stdout}\\n\\n${stderr}`)\n        } else {\n          console.log('✓ Commit dist files')\n        }\n      }\n\n      // remove existing tags (e.g. created by np)\n      if (command.overwriteExistingTag) {\n        yield exec(`git tag -d v${p.version}`, opts, getCallback())\n        yield exec(`git push origin :refs/tags/v${p.version}`, opts, getCallback())\n      }\n\n      // tag releasefiles\n\n      // escape \" characters in releaseMessage\n      releaseMessage = releaseMessage.split('\"').join('\\\\\"')\n      ;[err, stdout, stderr] = yield exec(`git tag v${p.version} -m \"${releaseMessage}\"`, opts, getCallback())\n      if (err) {\n        yield * exit(`Unable to tag commit:\\n\\n${stdout}\\n\\n${stderr}`)\n      } else {\n        console.log('✓ Tag release')\n      }\n\n      // push tag\n      ;[err, stdout, stderr] = yield exec(`git push origin v${p.version}`, opts, getCallback())\n      if (err) {\n        yield * exit(`Unable to tag commit:\\n\\n${stdout}\\n\\n${stderr}`)\n      } else {\n        console.log('✓ Push tag')\n      }\n\n      // check out master\n      ;[err, stdout, stderr] = yield exec('git checkout master', opts, getCallback())\n      if (err) {\n        yield * exit(`Unable to checkout branch 'master':\\n\\n${stdout}\\n\\n${stderr}`)\n      } else {\n        console.log('✓ Checkout master branch')\n        yield exec('rm .releaseMessage', opts, getCallback())\n        process.exit(0)\n      }\n    })()\n  })\n\nvar args = process.argv\nif (args.every((arg, i) => i < 2 || arg[0] === '-')) {\n  args.push('.')\n}\n\nprogram\n  .parse(process.argv)\n\nif (!program.args.length) program.help()\n"],"names":["process","on","err","error","program","version","packageJson","description","log","arguments","option","action","dir","command","opts","cwd","getCallback","exit","exec","async","fs","access","F_OK","path","join","pDir","loadJsonFile","p","getPackageJson","existsSync","readFile","releaseMessage","split","filter","line","stdout","stderr","files","i","length","warn","releasefilesAdded","overwriteExistingTag","args","argv","every","arg","push","parse","help"],"mappings":"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"}